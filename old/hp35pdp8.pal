/HP-35 EMULATOR
/KYLE OWEN - 6/17/2013

*0000
DECODE,	0000		/1 (12 BITS)
REGS,	0000		/1 (12 BITS)
P,	0000		/1 (4 BITS)
ROM,	0000		/1 (3 BITS)
RET,	0000		/1 (8 BITS)
OPCODE,	0000		/1 (10 BITS)
FIRST,	0000		/1 (4 BITS)
LAST,	0000		/1 (4 BITS)

*0010			/AUTO-INCREMENT!
INDEX1,	0000		/1 (12 BITS)
INDEX2,	0000		/1 (12 BITS)
DISPEN,	0000		/1 (1 BIT)
UPDATE,	0000		/1 (1 BIT)
CARRY,	0000		/1 (1 BIT)
PCARRY,	0000		/1 (1 BIT)
ERR,	0000		/1 (1 BIT)

*0020
PC,	0000		/1 (8 BITS)
DELROM,	0000		/1 (3 BITS)
ADDR,	0000
KEYC,	0000		/1 (8 BITS)
KEYR,	0000		/1 (8 BITS)
SIZE,	0000		/1 (12 BITS)
REGTOP,	0000		/1 (12 BITS)
REGIDX,	0000		/1 (12 BITS)
NEWIDX,	0000
ATIO,	0000		/1 (12 BITS)
DEBUG,	0000		/DEBUG MODE (SET BY SR)

REGA,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGB,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGC,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGD,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGE,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGF,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
REGM,	0000		/7 (56 BITS)
	0000
	0000
	0000
	0000
	0000
	0000
TEMP,	0000		/7 (56 BITS)
BYTE1,	0000
BYTE2,	0000
RESULT,	0000
	0000
	0000
	0000
HLTINS,	7777		/INSTRUCTION TO HALT ON (7777 FOR NO HALT)

	*0200			/START OF PROGRAM
	TAD	(INSTLU-1)
	DCA	INDEX1
	TAD	[-0400]		/1024 / 4 = 256
	DCA	SIZE
INIT1,	TAD	[ERROR]
	DCA I	INDEX1
	TAD	[JSB]
	DCA I	INDEX1
	TAD	[ARITH]
	DCA I	INDEX1
	TAD	[GOTO]
	DCA I	INDEX1
	ISZ	SIZE
	JMP	INIT1
	
	TAD	(INSTLU)
	DCA	TEMP
	TAD	[-0020]		/1024 / 64 = 16
	DCA	SIZE
INIT2,	TAD	TEMP
	AND	(0100)
	SZA
	JMP	INIT3
	TAD	TEMP
	TAD	(0020)
	DCA	RESULT
	TAD	[SELROM]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0144)
	DCA	RESULT
	TAD	[DSROM]
	DCA I	RESULT
INIT3,	CLA
	TAD	TEMP
	TAD	(0004)
	DCA	RESULT
	TAD	[SETS]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0010)
	DCA	RESULT
	TAD	[SETP]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0010)
	DCA	RESULT
	TAD	[TESTS]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0004)
	DCA	RESULT
	TAD	[LDCONS]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0004)
	DCA	RESULT
	TAD	[DECP]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0010)
	DCA	RESULT
	TAD	[CLRSB]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0010)
	DCA	RESULT
	TAD	[TESTP]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0020)
	DCA	RESULT
	TAD	[INCP]
	DCA I	RESULT
	TAD	TEMP
	TAD	(0100)
	DCA	TEMP
	ISZ	SIZE
	JMP	INIT2
	JMP	INIT4
	
	PAGE
	
INIT4,	TAD	(INSTLU)
	DCA	RESULT
	TAD	[OPNOP]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0050)
	DCA	RESULT
	TAD	[DISPT]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0010)
	DCA	RESULT
	TAD	[RETS]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0004)
	DCA	RESULT
	TAD	[CLRS]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0164)
	DCA	RESULT
	TAD	[CEXCHM]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0050)
	DCA	RESULT
	TAD	[KTOROM]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0130)
	DCA	RESULT
	TAD	[PUSHC]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0200)
	DCA	RESULT
	TAD	[PULLA]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0200)
	DCA	RESULT
	TAD	[DISOFF]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0200)
	DCA	RESULT
	TAD	[MTOC]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0200)
	DCA	RESULT
	TAD	[ROTATE]
	DCA I	RESULT
	TAD	RESULT
	TAD	(0200)
	DCA	RESULT
	TAD	[CLEARR]
	DCA I	RESULT
	
	CLA
	DCA	P		/CLEAR POINTER
	DCA	ROM		/CLEAR ROM SELECT
	DCA	RET		/CLEAR RETURN
	DCA	CARRY		/CLEAR CARRY
	DCA	PCARRY		/CLEAR PREV CARRY
	DCA	DELROM		/CLEAR DELROM SELECT
	DCA	ADDR		/CLEAR ADDRESS
	DCA	KEYR		/CLEAR KEY ROM
	DCA	PC		/CLEAR PC
	CMA			/ACC = 7777 (-1)
	DCA	KEYC		/KEY CODE = -1
	CMA
	DCA	UPDATE		/UPDATE DISPLAY
	CMA
	DCA	DISPEN		/ENABLE DISPLAY
	KCC			/PREPARE KEYBOARD INPUT

/MAIN LOOP
LOOP,	CLA CLL
	TAD	CARRY		/GET CARRY
	DCA	PCARRY		/PCARRY = CARRY
	DCA	CARRY		/CLEAR CARRY
	TAD	ROM		/GET ROM #
	RTL
	BSW			/MULTIPLY BY 256
	TAD	PC		/ADD PC
	DCA	ADDR		/SAVE ADDRESS
	TAD	ADDR
	TAD	(ROM35)		/ADD START OF ROM DUMP
	DCA	TEMP		/DEPOSIT ADDRESS
	TAD I	TEMP		/FETCH OPCODE FROM ROM
	DCA	OPCODE		/SAVE OPCODE
	TAD	PC		/GET PC
	IAC			/INCREMENT PC
	AND	[0377]		/PC %= 256
	DCA	PC		/SAVE PC
	TAD	ADDR
	TAD	(-0277)		/IS THERE AN ERROR?
	SZA
	JMP	GETSR		/NO
	CMA			/YES
	DCA	ERR		/SET ERROR
	
GETSR,	CLA CLL
	OSR			/GET SR
	RAR			/SR11 = ADDR/~INSTR
	SNL			/WAS IT 1?
	JMP	LOOP1		/NO, PUT ADDRESS IN Q
	CLA
	TAD	OPCODE
	MQL			/PUT OPCODE IN Q
	JMP	LOOP2
	
LOOP1,	CLA
	TAD	ADDR		/GET ADDRESS
	MQL			/PUT ADDRESS IN Q
	JMP	LOOP2
	
	PAGE
	
LOOP2,	OSR
	AND	(2000)		/SR10 = DEBUG MODE
	DCA	DEBUG
	TAD	DEBUG
	SNA
	JMP	LOOP3		/DEBUG MODE DISABLED
	
DEBUGP,	CLA
	TAD	[REGA]
	DCA	REGTOP
	JMS	PRINTR
	TAD	[REGB]
	DCA	REGTOP
	JMS	PRINTR
	TAD	[REGC]
	DCA	REGTOP
	JMS	PRINTR
	TAD	[REGD]
	DCA	REGTOP
	JMS	PRINTR
	
LOOP3,	OSR			/GET SR
	RAL			/SR0 = HALT
	SNL			/WAS IT 0?
	JMP	INSDEC		/YES, CONTINUE
	CLA
	TAD	HLTINS
	CMA
	SZA			/IS HLTINS 7777?
	JMP	HLTOPC		/NO, HALT ON OPCODE
HLTNOW,	HLT			/YES, HALT NOW
	JMP	INSDEC		/CONTINUE WITH DECODE
HLTOPC,	IAC
	TAD	OPCODE
	SZA			/DOES HLTINS == OPCODE?
	JMP	INSDEC		/NO, CONTINUE WITH DECODE
	JMP	HLTNOW		/YES, HALT NOW
	
		/INSTRUCTION DECODE
INSDEC,	CLA
	TAD	OPCODE		/GET OPCODE
	TAD	(INSTLU)/ADD BEGINNING OF TABLE
	DCA	TEMP		/STORE ADDRESS
	TAD I	TEMP		/GET SUBROUTINE ADDRESS
	DCA	TEMP		/STORE ADDRESS
	JMS I	TEMP		/JUMP TO SUBROUTINE
	JMP	READKB		/READ KEYBOARD
	
PRINT,	0000			/PRINT CHARACTER IN A
	TLS
	TSF
	JMP	.-1
	CLA
	JMP I	PRINT
	
		/READ FROM KEYBOARD
READKB,	KSF			/KEY IN BUFFER?
	JMP	CHKKEY		/NO, KEY HAS BEEN READ BEFORE?
	KRB			/READ KEY
	AND	(0177)		/KEEP 7 BITS
	DCA	KEYC		/STORE KEY IN KEYC
	TAD	KEYC
	AND	(0100)		/CHECK UPPER BIT OF KEY
	SZA			/IS IT 0?
	JMP	DECOD1		/NO, DECODE ALPHA KEYS
	TAD	KEYC
	AND	(0040)		/CHECK NEXT BIT OF KEY
	SNA			/IS IT 1?
	JMP	DECOD1		/NO, DECODE CONTROL KEYS
	CLA
	TAD	KEYC
	AND	(0030)		/CHECK NEXT TWO BITS OF KEY
	SNA			/ARE THEY NOT 0?
	JMP	INVKEY		/NOT A VALID KEY (04X)
	CLA			/05X, 06X AND 07X VALID
	TAD	(-0010)		/SUBTRACT 010 FROM KEY CODE
	TAD	KEYC
	AND	(0037)
	TAD	(NUMLU)		/ADD START OF TABLE
	DCA	TEMP
	TAD I	TEMP		/GET ACTUAL KEY CODE
	DCA	KEYC		/SAVE IN KEY CODE
	JMP	CHKKEY		/CONTINUE WITH DECODING
DECOD1,	CLA
	TAD	(KEYLU-2)	/GET START OF TABLE - 2
	DCA	INDEX1		/STORE IN AUTOINC INDEX
	TAD	(-0025)		/20 KEYS LEFT TO DECODE, PLUS 1
	DCA	SIZE
DECOLP,	ISZ	SIZE
	SKP			/STILL HAVE KEYS LEFT
	JMP	INVKEY		/NO MATCH
	CLA
	ISZ	INDEX1		/NEED TO INCREMENT BY 2
	TAD	KEYC
	TAD I	INDEX1
	SZA			/DO THE KEYS MATCH?
	JMP	DECOLP		/NO, KEEP LOOPING
	TAD I	INDEX1		/YES, GET THE NEXT WORD
	DCA	KEYC		/STORE IN KEY CODE
	JMP	CHKKEY		/GO ON WITH READING KEY
INVKEY,	CLA CMA			/INVALID KEY
	DCA	KEYC		/KEY CODE = -1
	JMP	DISP		/CONTINUE WITH DISPLAY
CHKKEY,	CLA
	TAD	KEYC		/HAS KEY BEEN READ PREVIOUSLY?
	SPA
	JMP	DISP		/NO, CONTINUE WITH DISPLAY
	DCA	KEYR		/KEY ROM = KEY CODE
	CMA
	DCA	KEYC		/KEY CODE = -1
	TAD	REGS
	AND	(7776)
	DCA	REGS
	ISZ	REGS		/SET S[0]
	DCA	ERR		/CLEAR ERROR
	JMP	DISP
	
	PAGE
	
		/DISPLAY
DISP,	CLA
	TAD	DEBUG
	SZA
	JMP	LOOP		/DON'T PRINT DISPLAY IF DEBUG
	TAD	DISPEN
	SNA			/IS DISPLAY ENABLED?
	JMP	LPDISP		/NO, DOES DISP NEED UPDATE?
	DCA	UPDATE		/DISPLAY UPDATE = TRUE
	JMP	LOOP		/BACK TO TOP
	
LPDISP,	TAD	UPDATE
	SNA			/DOES DISP NEED UPDATE?
	JMP	LOOP		/NO, BACK TO TOP
	CLA			/YES, UPDATE DISPLAY
	DCA	UPDATE		/DISPLAY UPDATE = FALSE
	TAD	(0015)		/CARRIAGE RETURN
	JMS	PRINT		/PRINT A CR
	TAD	(-0025)		/21 SPACES TO DISPLAY
	DCA	SIZE
LPDIS1,	TAD	(0040)		/SPACE
	JMS	PRINT		/PRINT A SPACE
	ISZ	SIZE
	JMP	LPDIS1		/PRINT ALL 21
	JMP	PRCR		/PRINT CARRIAGE RETURN
	
PRCR,	TAD	(0015)		/CARRIAGE RETURN
	JMS	PRINT		/PRINT A CR
	TAD	(-0016)		/PRINT REGISTER (14 DIGITS)
	DCA	SIZE		/SIZE = -14
BIGLP,	CLA
	TAD	SIZE		/A = SIZE
	CMA			/A = -SIZE - 1
	DCA	REGIDX		/INDEX FROM 13 TO 0
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	AND	(0010)
	SNA			/B[I] >= 8?
	JMP	LPDIS2		/NO, CONTINUE
	CLA
	TAD	(0040)		/SPACE
	JMS	PRINT		/PRINT A SPACE
	JMP	LPDIS9		/CONTINUE WITH FOR LOOP
	
LPDIS2,	TAD	(-0002)		/IS INDEX 2?
	TAD	REGIDX
	SNA			/NO?
	JMP	LPDIS3		/YES, PRINT '-' OR SPACE NOW
	TAD	(-0013)		/HOW ABOUT 13 DECIMAL? (02 + 013)
	SZA
	JMP	LPDIS4		/NOT 2 OR 13, SO TIME TO PRINT NUMBER	
LPDIS3,	TAD	[REGA]		/PRINT A '-' OR SPACE
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	AND	(0010)		/IS A[I] >= 8?
	SZA
	JMP	LPDIS5		/YES, PRINT A '-'
	TAD	(0040)		/NO, PRINT A SPACE
	JMP	LPDIS6		/PRINT IT	
LPDIS5,	CLA
	TAD	(0055)		/'-'
LPDIS6,	JMS	PRINT		/PRINT IT
	JMP	LPDIS7		/SEE IF '.' NEEDS PRINTING

LPDIS4,	CLA			/PRINT NUMBER
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	TAD	(0060)		/ADD '0'
	JMS	PRINT		/PRINT IT
LPDIS7,	TAD	[REGB]		/PRINT '.'?
	DCA	REGTOP
	JMS	GETAT
	TAD	(-0002)		/IS B[I] == 2?
	TAD	ATIO
	SZA
	JMP	LPDIS9		/NO, CONTINUE
	TAD	(0056)		/YES, PRINT '.'
	JMS	PRINT		/PRINT IT
LPDIS9,	ISZ	SIZE
	JMP	BIGLP		/CONTINUE WITH FOR LOOP
LPDIS8,	CLA			/ERROR?
	TAD	ERR
	SNA
	JMP	LOOP		/NO ERROR, BACK TO TOP
	CLA
	TAD	(-0006)		/PRINT " ERROR"
	DCA	SIZE
	TAD	(ERRMSG-1)
	DCA	INDEX1
ERRLP,	TAD I	INDEX1
	JMS	PRINT
	ISZ	SIZE
	JMP	ERRLP		/KEEP PRINTING
	JMP	LOOP		/BACK TO TOP

ERRMSG,	0040			/' '
	0105			/'E'
	0122			/'R'
	0122			/'R'
	0117			/'O'
	0122			/'R'
	
	PAGE

OPNOP,	0000			/NO OPERATION
	JMP I	OPNOP
	
ERROR,	0000
	HLT
	JMP I	ERROR
	
ARITH,	0000
	CLA CLL
	JMS	GETFL		/GET FIRST AND LAST
	DCA	CARRY		/CLEAR CARRY
	DCA	BYTE1		/CLEAR BYTE1
	TAD	OPCODE
	RTR
	RTR
	RAR
	AND	(0037)		/SHIFT RIGHT 5
	DCA	DECODE		/GET AR OPERATION
	TAD	DECODE		/SET CARRY IF BOTTOM TWO BITS SET
	AND	(0003)
	CMA IAC
	TAD	(0003)
	SZA			/ARE BOTTOM TWO SET?
	JMP	ARITH1		/NO
	CLA CMA			/YES,
	DCA	CARRY		/SET CARRY
ARITH1,	CLA			/INITIALIZE INDEX
	TAD	FIRST
	DCA	REGIDX		/SET INDEX TO FIRST
ARITH2,	CLA
	TAD	(ARLOOK)
	TAD	DECODE
	DCA	TEMP
	TAD I	TEMP
	DCA	TEMP
	JMS I	TEMP
	ISZ	REGIDX		/INCREMENT INDEX
	CLA
	TAD	REGIDX		/IS INDEX == LAST + 1?
	CMA IAC
	TAD	LAST
	IAC
	SZA
	JMP	ARITH2		/NO, CONTINUE
	JMP I	ARITH		/YES, RETURN
ARLOOK,	AR00
	AR01
	AR02
	AR03
	AR04
	AR05
	AR06
	AR07
	AR08
	AR09
	AR0A
	AR0B
	AR0C
	AR0D
	AR0E
	AR0F
	AR10
	AR11
	AR12
	AR13
	AR14
	AR15
	AR16
	AR17
	AR18
	AR19
	AR1A
	AR1B
	AR1C
	AR1D
	AR1E
	AR1F

AR00,	0000			/0 + B
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	CARRY
	TAD	ATIO
	DCA	CARRY
	JMP I	AR00
	
AR01,	0000			/B = 0
	TAD	[REGB]
	DCA	REGTOP
	DCA	ATIO
	JMS	STORAT
	JMP I	AR01
	
AR02,	0000			/A - C
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	JMS	DOSUB
	JMP I	AR02
	
AR03,	0000			/C - 1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	SNA
	JMP I	AR03
	CLA
	DCA	CARRY
	JMP I	AR03
	
	PAGE
	
AR04,	0000			/C = B
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGC]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR04
	
AR05,	0000			/C = 0 - C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR05
	
AR06,	0000			/C = 0
	TAD	[REGC]
	DCA	REGTOP
	DCA	ATIO
	JMS	STORAT
	JMP I	AR06
	
AR07,	0000			/C = 0 - C - 1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR07
	
AR08,	0000			/SHIFT LEFT A
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	TAD	BYTE1
	DCA	ATIO
	JMS	STORAT
	TAD	BYTE2
	DCA	BYTE1
	JMP I	AR08
	
AR09,	0000			/B = A
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGB]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR09
	
AR0A,	0000			/C = A - C
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR0A
	
AR0B,	0000			/C = C - 1
	TAD	[REGC]
	DCA	REGTOP
	DCA	BYTE2
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR0B
	
AR0C,	0000			/A = C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGA]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR0C
	
AR0D,	0000			/0 - C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	TAD	CARRY
	DCA	CARRY
	JMP I	AR0D
	
AR0E,	0000			/C = A + C
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR0E
	
	PAGE
	
AR0F,	0000			/C = C + 1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	DCA	BYTE2
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR0F
	
AR10,	0000			/A - B
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	JMS	DOSUB
	JMP I	AR10
	
AR11,	0000			/B <> C
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGB]
	DCA	REGTOP
	JMS	STORAT
	TAD	BYTE1
	DCA	ATIO
	TAD	[REGC]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR11
	
AR12,	0000			/SHIFT RIGHT C
	TAD	[REGC]
	DCA	REGTOP
	TAD	REGIDX
	CMA IAC
	TAD	LAST
	SZA
	JMP	AR121
	DCA	ATIO
AR122,	JMS	STORAT
	JMP I	AR12
AR121,	CLA
	TAD	REGIDX
	DCA	TEMP
	ISZ	REGIDX
	JMS	GETAT
	TAD	TEMP
	DCA	REGIDX
	JMP	AR122
	
AR13,	0000			/A - 1
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	SNA
	JMP I	AR13
	CLA
	DCA	CARRY
	JMP I	AR13
	
AR14,	0000			/SHIFT RIGHT B
	TAD	[REGB]
	DCA	REGTOP
	TAD	REGIDX
	CMA IAC
	TAD	LAST
	SZA
	JMP	AR141
	DCA	ATIO
AR142,	JMS	STORAT
	JMP I	AR14
AR141,	CLA
	TAD	REGIDX
	DCA	TEMP
	ISZ	REGIDX
	JMS	GETAT
	TAD	TEMP
	DCA	REGIDX
	JMP	AR142
	
AR15,	0000			/C = C + C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	ATIO
	DCA	BYTE2
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR15
	
AR16,	0000			/SHIFT RIGHT A
	TAD	[REGA]
	DCA	REGTOP
	TAD	REGIDX
	CMA IAC
	TAD	LAST
	SZA
	JMP	AR161
	DCA	ATIO
AR162,	JMS	STORAT
	JMP I	AR16
AR161,	CLA
	TAD	REGIDX
	DCA	TEMP
	ISZ	REGIDX
	JMS	GETAT
	TAD	TEMP
	DCA	REGIDX
	JMP	AR162
	
	PAGE
	
AR17,	0000			/A = 0
	TAD	[REGA]
	DCA	REGTOP
	DCA	CARRY
	DCA	ATIO
	JMS	STORAT
	JMP I	AR17
	
AR18,	0000			/A = A - B
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR18
	
AR19,	0000			/A <> B
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGA]
	DCA	REGTOP
	JMS	STORAT
	TAD	BYTE1
	DCA	ATIO
	TAD	[REGB]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR19
	
AR1A,	0000			/A = A - C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR1A
	
AR1B,	0000			/A = A - 1
	TAD	[REGA]
	DCA	REGTOP
	DCA	BYTE2
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOSUB
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR1B
	
AR1C,	0000			/A = A + B
	TAD	[REGB]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR1C
	
	PAGE
	
AR1D,	0000			/A <> C
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	[REGA]
	DCA	REGTOP
	JMS	STORAT
	TAD	BYTE1
	DCA	ATIO
	TAD	[REGC]
	DCA	REGTOP
	JMS	STORAT
	JMP I	AR1D
	
AR1E,	0000			/A = A + C
	TAD	[REGC]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE2
	TAD	[REGA]
	DCA	REGTOP
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR1E
	
AR1F,	0000			/A = A + 1
	TAD	[REGA]
	DCA	REGTOP
	DCA	BYTE2
	JMS	GETAT
	TAD	ATIO
	DCA	BYTE1
	JMS	DOADD
	TAD	RESULT
	DCA	ATIO
	JMS	STORAT
	JMP I	AR1F
	
GETFL,	0000
	CLA CLL
	TAD	OPCODE
	AND	[0034]		/ONLY KEEP FL PORTION
	RTR
	DCA	DECODE		/SAVE IN DECODE
	TAD	DECODE
	SZA			/IS IT ZERO?
	JMP	GETFL1		/NOT ZERO
	TAD	P
	DCA	FIRST
	TAD	P
	DCA	LAST
	JMP I	GETFL
GETFL1,	RTR
	RAR
	SZA			/IS IT 4?
	JMP	GETFL2		/NOT 4
	DCA	FIRST
	TAD	P
	DCA	LAST
	JMP I	GETFL
GETFL2,	CLA
	TAD	DECODE
	TAD	(FL1-1)
	DCA	DECODE
	TAD I	DECODE
	AND	[0017]
	DCA	LAST
	TAD I	DECODE
	BSW
	AND	[0017]
	DCA	FIRST
	JMP I	GETFL
FL1,	0314
FL2,	0002
FL3,	0015
	0000
FL5,	0315
FL6,	0202
FL7,	1515
	
DOADD,	0000
	CLA CLL
	TAD	BYTE1
	TAD	BYTE2
	DCA	RESULT
	TAD	CARRY		/IS CARRY SET?
	SZA
	ISZ	RESULT		/INCREMENT IF CARRY
	CLA
	TAD	RESULT
	TAD	(-0012)
	SPA			/RESULT < 0?
	JMP	DOADD1		/NO
	DCA	RESULT
	CMA
DOADD2,	DCA	CARRY
	JMP I	DOADD
DOADD1,	CLA
	JMP	DOADD2
	
	PAGE
	
DOSUB,	0000
	CLA CLL
	TAD	CARRY
	SNA
	JMP	DOSUB1		/NO CARRY
	CLA IAC
DOSUB1,	TAD	BYTE2		/ADD CARRY TO Y
	CMA IAC			/TWO'S COMPLEMENT (CARRY + Y)
	TAD	BYTE1		/A = X - Y - CARRY
	DCA	RESULT
	TAD	RESULT
	SMA			/RESULT NEGATIVE?
	JMP	DOSUB2		/NO
	TAD	(0012)		/YES, ADD 10 TO RESULT
	DCA	RESULT
	CLA CMA			/SET CARRY
	JMP	DOSUB3
DOSUB2,	CLA			/CLEAR CARRY
DOSUB3,	DCA	CARRY
	JMP I	DOSUB
	
JSB,	0000			/JUMP TO SUBROUTINE
	CLA CLL
	TAD	PC
	DCA	RET		/RET = PC
	TAD	OPCODE
	RTR			/GET TOP 8 BITS OF OPCODE
	AND	[0377]
	DCA	PC
	TAD	DELROM
	DCA	ROM
	JMP I	JSB
	
GOTO,	0000
	CLA
	TAD	PCARRY
	SZA
	JMP I	GOTO
	CLA CLL
	TAD	OPCODE		/SHIFT OPCODE RIGHT 2
	RTR
	AND	[0377]
	DCA	PC
	TAD	DELROM
	DCA	ROM
	JMP I	GOTO
	
SELROM,	0000
	CLA CLL
	TAD	OPCODE
	RTL
	RTL
	RTL
	AND	[0007]
	DCA	ROM
	TAD	ROM
	DCA	DELROM
	JMP I	SELROM
	
SETP,	0000
	JMS	TPFOUR
	DCA	P		/P = TOP FOUR OF OPCODE
	JMP I	SETP
	
DSROM,	0000
	CLA CLL
	TAD	OPCODE
	RTL
	RTL
	RTL
	AND	[0007]
	DCA	DELROM
	JMP I	DSROM
	
LDCONS,	0000
	TAD	P
	TAD	(-0016)
	SMA
	JMP	LDCST1
	JMS	TPFOUR
	DCA	ATIO
	TAD	P
	DCA	REGIDX
	TAD	[REGC]
	DCA	REGTOP
	JMS	STORAT
LDCST1,	JMS	DECP
	JMP I	LDCONS
	
SETS,	0000
	JMS	TPFOUR
	CMA			/NEGATE IT
	DCA	SIZE		/STORE AS SIZE
	CLA CMA CLL RAL		/A = 7776
SETS1,	ISZ	SIZE
	JMP	SETS2
	JMP	SETS3
SETS2,	RAL
	JMP	SETS1
SETS3,	DCA	ATIO		/!MASK
	TAD	REGS		/A = REGS
	CMA			/A = !REGS
	AND	ATIO		/A = !REGS & !MASK
	CMA			/A = REGS + MASK
	DCA	REGS
	JMP I	SETS
	
CLRSB,	0000
	JMS	TPFOUR
	CMA			/NEGATE IT
	DCA	SIZE		/STORE AS SIZE
	CLA CMA CLL RAL		/A = 7776
CLRSB1,	ISZ	SIZE
	JMP	CLRSB2
	JMP	CLRSB3
CLRSB2,	RAL
	JMP	CLRSB1
CLRSB3,	DCA	ATIO		/MASK
	TAD	ATIO		/A = MASK
	AND	REGS		/A = MASK & REGS
	DCA	REGS
	JMP I	CLRSB
	
	PAGE

TPFOUR,	0000
	CLA CLL
	TAD	OPCODE
	RTR
	RTR
	RTR
	AND	[0017]		/GET TOP 4 BITS
	JMP I	TPFOUR
	
TESTS,	0000
	JMS	TPFOUR
	CMA			/NEGATE IT
	DCA	SIZE		/STORE AS SIZE
	CLA CLL CML RAL		/A = 0001
TESTS1,	ISZ	SIZE
	JMP	TESTS2
	JMP	TESTS3
TESTS2,	RAL
	JMP	TESTS1
TESTS3,	AND	REGS
	DCA	CARRY
	JMP I	TESTS
	
TESTP,	0000
	JMS	TPFOUR
	CMA IAC			/A = -TOP FOUR
	TAD	P		/A = -TOP FOUR + P
	SZA			/A == P?
	JMP I	TESTP		/NO, CARRY STAYS 0
	CMA			/TOP FOUR == P, SET CARRY
	DCA	CARRY
	JMP I	TESTP
	
GETAT,	0000
	CLA CLL
	TAD	REGIDX		/LOAD INDEX VALUE
	RAR			/SHIFT LOW BIT INTO L
	TAD	REGTOP		/ADD TOP OF REGISTER
	DCA	NEWIDX		/STORE NEW INDEX
	TAD I	NEWIDX		/FETCH WORD AT INDEX
	SZL			/IF L = 1, SWAP BYTES
	BSW
	AND	[0017]		/GET ONLY 4 BITS
	DCA	ATIO		/SAVE 4 BITS
	JMP I	GETAT
	
STORAT,	0000
	CLA CLL
	TAD	ATIO		/GET INPUT
	AND	[0017]		/ENSURE IT'S 4 BITS
	DCA	ATIO		/SAVE INPUT
	TAD	REGIDX		/LOAD INDEX VALUE
	RAR			/SHIFT LOW BIT INTO L
	TAD	REGTOP		/ADD TOP OF REGISTER
	DCA	NEWIDX		/STORE NEW INDEX
	TAD I	NEWIDX		/FETCH WORD AT INDEX
	SZL			/IF L = 1, SWAP BYTES
	BSW
	AND	(1700)		/CLEAR 4 BITS
	TAD	ATIO		/PUT 4 BITS IN WORD
	SZL			/IF L = 1, SWAP BYTES
	BSW
	DCA I	NEWIDX		/PUT WORD BACK
	JMP I	STORAT
	
DECP,	0000			/DECREMENT POINTER
	CLA
	TAD	P		/GET P
	CMA IAC
	CMA			/SUBTRACT 1
	AND	[0017]		/P &= 0X0F
	DCA	P		/STORE P
	JMP I	DECP
	
DISPT,	0000			/TOGGLE DISPLAY
	CLA
	DCA	DISPEN		/DISABLE DISPLAY
	DCA	UPDATE		/DON'T UPDATE DISPLAY
	JMP I	DISPT
	
RETS,	0000			/RETURN FROM SUB
	CLA
	TAD	RET
	DCA	PC		/PC = RET
	JMP I	RETS
	
CLRS,	0000			/CLEAR STATUS REG
	CLA
	DCA	REGS		/CLEAR STATUS
	JMP I	CLRS		/CONTINUE

INCP,	0000			/INCREMENT POINTER
	CLA
	TAD	P		/GET P
	IAC			/ADD 1
	AND	[0017]		/P &= 0X0F
	DCA	P		/STORE P
	JMP I	INCP	

KTOROM,	0000			/KEY TO ROM ADDR
	CLA
	TAD	KEYR
	DCA	PC		/PC = KEY
	JMP I	KTOROM
	
CEXCHM,	0000			/EXCHANGE C AND M
	CLA
	TAD	(REGC-1)
	DCA	INDEX1
	TAD	(TEMP-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM C TO TEMP
	TAD	(REGM-1)
	DCA	INDEX1
	TAD	(REGC-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM M TO C
	TAD	(TEMP-1)
	DCA	INDEX1
	TAD	(REGM-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM TEMP TO M
	JMP I	CEXCHM
	
COPY,	0000			/COPY FROM INDEX1 TO INDEX2
	CLA
	TAD	(-0007)
	DCA	SIZE
COPY1,	TAD I	INDEX1
	DCA I	INDEX2
	ISZ	SIZE
	JMP	COPY1
	JMP I	COPY
	
	PAGE
	
PUSHC,	0000			/PUSH C
	CLA
	TAD	(REGE-1)
	DCA	INDEX1
	TAD	(REGF-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM E TO F
	TAD	(REGD-1)
	DCA	INDEX1
	TAD	(REGE-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM D TO E
	TAD	(REGC-1)
	DCA	INDEX1
	TAD	(REGD-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM C TO D
	JMP I	PUSHC
	
PULLA,	0000			/PULL A
	CLA
	TAD	(REGD-1)
	DCA	INDEX1
	TAD	(REGA-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM D TO A
	TAD	(REGE-1)
	DCA	INDEX1
	TAD	(REGD-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM E TO D
	TAD	(REGF-1)
	DCA	INDEX1
	TAD	(REGE-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM F TO E
	JMP I	PULLA
	
DISOFF,	0000			/DISPLAY OFF
	CLA
	TAD	DISPEN		/GET DISPLAY ENABLE
	CMA			/INVERT IT
	SZA			/IS DISPLAY ENABLED?
	ISZ	UPDATE		/YES, UPDATE DISPLAY
	DCA	DISPEN		/SAVE DISPLAY ENABLE
	JMP I	DISOFF
	
MTOC,	0000			/COPY M TO C
	CLA
	TAD	(REGM-1)
	DCA	INDEX1
	TAD	(REGC-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM M TO C
	JMP I	MTOC
	
ROTATE,	0000			/ROTATE DOWN
	CLA
	TAD	(REGC-1)
	DCA	INDEX1
	TAD	(TEMP-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM C TO TEMP
	TAD	(REGD-1)
	DCA	INDEX1
	TAD	(REGC-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM D TO C
	TAD	(REGE-1)
	DCA	INDEX1
	TAD	(REGD-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM E TO D
	TAD	(REGF-1)
	DCA	INDEX1
	TAD	(REGE-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM F TO E
	TAD	(TEMP-1)
	DCA	INDEX1
	TAD	(REGF-1)
	DCA	INDEX2
	JMS	COPY		/COPY FROM TEMP TO F
	JMP I	ROTATE
	
CLEARR,	0000
	CLA
	TAD	(-0070)
	DCA	SIZE
	TAD	(REGA-1)
	DCA	INDEX1
CLR1,	DCA I	INDEX1
	ISZ	SIZE
	JMP	CLR1
	JMP I	CLEARR
	
PRINTR,	0000
	CLA
	TAD	(-0016)		/REGISTER SIZE
	DCA	SIZE
PRNR1,	CLA IAC			/REGIDX = -SIZE - 1
	TAD	SIZE
	CMA IAC			/TWO'S COMPLEMENT
	DCA	REGIDX
	JMS	GETAT
	TAD	ATIO
	TAD	(0060)
	JMS	PRINT
	ISZ	SIZE
	JMP	PRNR1
	TAD	(0012)		/NL
	JMS	PRINT
	TAD	(0015)		/CR
	JMS	PRINT
	JMP I	PRINTR
	
	*3600
NUMLU,	7777
	7777
	0036			/*
	0026			/+
	7777
	0066			/-
	0043			/.
	0046			//
	0044			/0
	0034			/1
	0033			/2
	0032			/3
	0024			/4
	0023			/5
	0022			/6
	0064			/7
	0063			/8
	0062			/9
	7777
	7777
	7777
	7777
	7777
	7777
KEYLU,	-0015			/ENTER
	0076
	-0033			/ESC CLR
	0000
KEYLU1,	-0136			/^ X^Y
	0006
	-0107			/G LOG
	0004
	-0116			/N LN
	0003
	-0130			/X E^X
	0002
	-0121			/Q SQRT(X)
	0056
	-0101			/A ARC
	0054
	-0111			/I SIN
	0053
	-0103			/C COS
	0052
	-0124			/T TAN
	0050
	-0120			/P PI
	0042
	-0126			/V 1/X
	0016
	-0127			/W X<>Y
	0014
	-0114			/L ROLL
	0013
	-0123			/S STO
	0012
	-0122			/R RCL
	0010
	-0110			/H CHS
	0073
	-0105			/E EEX
	0072
	-0177			/BACKSPACE CLX
	0070
	
	
	*4000
INSTLU,	0000			/START OF INSTRUCTION LOOKUP
	
	*6000
ROM35,	0335; 1377; 1044; 0027; 0504; 1104; 0204; 0420; 1321; 
	1773; 0137; 0303; 0650; 1547; 1356; 1742; 0056; 0220; 
	1752; 1752; 1752; 0153; 1151; 0250; 1250; 0377; 1752; 
	1752; 1752; 0060; 0314; 0252; 0650; 0103; 0723; 0314; 
	0060; 0000; 0203; 0504; 0104; 0273; 1104; 0237; 1204; 
	1413; 0056; 0220; 1450; 1557; 1752; 1752; 1752; 0113; 
	1147; 1650; 0561; 1567; 1713; 1316; 0304; 0733; 0450; 
	0064; 1316; 1565; 0456; 1372; 0426; 1552; 1603; 0672; 
	1633; 1466; 1514; 1633; 0034; 0752; 0002; 0463; 1304; 
	1326; 1646; 0424; 1037; 0575; 1567; 0322; 0562; 0332; 
	1612; 0567; 0316; 0064; 0616; 1414; 0452; 0612; 0672; 
	0643; 0252; 0572; 0537; 0514; 1652; 0424; 0413; 1452; 
	0052; 1735; 0412; 1316; 1454; 1047; 1662; 0753; 1321; 
	0220; 0424; 1733; 1662; 0372; 0616; 0672; 0777; 0332; 
	0252; 1514; 0426; 0552; 1176; 0473; 1166; 1003; 0312; 
	1735; 1326; 0636; 1454; 1117; 0216; 0756; 0114; 0422; 
	0074; 0642; 1077; 1656; 0354; 1747; 0312; 0604; 0753; 
	0376; 0650; 0056; 1772; 1772; 0772; 0772; 0112; 1217; 
	1656; 1646; 0646; 1237; 1656; 1046; 0112; 1373; 1216; 
	1752; 0016; 1373; 1243; 1366; 0324; 1323; 1576; 0376; 
	0724; 1337; 0450; 0704; 0316; 0556; 0276; 0776; 1056; 
	0060; 0220; 0561; 0504; 1567; 1316; 0636; 1044; 1477; 
	0772; 1004; 0524; 1467; 0752; 1433; 0050; 0024; 1437; 
	0044; 0034; 1454; 1503; 1050; 1024; 1463; 0416; 0544; 
	0320; 0450; 1656; 0565; 0704; 1735; 1275; 1053; 1326; 
	0034; 0254; 0427; 1414; 1356; 1366; 1742; 1742; 0214; 
	0074; 1542; 1677; 0002; 1653; 1742; 1456; 0060; 0404; 
	1324; 0163; 0677; 0376; 1244; 1417; 0624; 1763; 0034; 
	1222; 0751; 1250; 1557; 1717; 1456; 0241; 0650; 0241; 
	0650; 1124; 0047; 1656; 0524; 0113; 0336; 1231; 0450; 
	1225; 1141; 0225; 0650; 1231; 1224; 1553; 1356; 1742; 
	0446; 1646; 0552; 1222; 0672; 0147; 1322; 0752; 0167; 
	1316; 1216; 0450; 1056; 0407; 1056; 0414; 1573; 0450; 
	1656; 0642; 0267; 0256; 0616; 0212; 1457; 0616; 0124; 
	0227; 1224; 0667; 0524; 0127; 0376; 1676; 0067; 1222; 
	1576; 0353; 0776; 1462; 0722; 1456; 0456; 1522; 0357; 
	0650; 1316; 1662; 1456; 0422; 0450; 1776; 1776; 0217; 
	0316; 0052; 1326; 1311; 0542; 0650; 1656; 0414; 1221; 
	0614; 1155; 1014; 1155; 0214; 1030; 1214; 1155; 1071; 
	1155; 1461; 0416; 1155; 0216; 1455; 1461; 1256; 1231; 
	1124; 0663; 0376; 1141; 0144; 0316; 0542; 0752; 0124; 
	1227; 1231; 1461; 1256; 1225; 1461; 1256; 1256; 1125; 
	1256; 1655; 1461; 1214; 1161; 1071; 1014; 1165; 0214; 
	1030; 0614; 1161; 0414; 1161; 1161; 1456; 1116; 1514; 
	0530; 1757; 0614; 1030; 0630; 0530; 0230; 0430; 1130; 
	0124; 1553; 0060; 1356; 1742; 0020; 0420; 0416; 1226; 
	1056; 1207; 0776; 1416; 1203; 1616; 0420; 0420; 0512; 
	0420; 0742; 1516; 1243; 1716; 0416; 0034; 1122; 0054; 
	1247; 0267; 0742; 1426; 1313; 1626; 0426; 0034; 0054; 
	1317; 0267; 0034; 1626; 1557; 0020; 0572; 0572; 1352; 
	1536; 1176; 1433; 0420; 1006; 1453; 0376; 1456; 1416; 
	0420; 0316; 1314; 0730; 1030; 0530; 0330; 1130; 1030; 
	0130; 0630; 0330; 0530; 1414; 0060; 0020; 1612; 1573; 
	0542; 0776; 0054; 1357; 1652; 1352; 0142; 1633; 1316; 
	1116; 1052; 0312; 1414; 1273; 0420; 1222; 1222; 0576; 
	1663; 0722; 1422; 1062; 0216; 1576; 1673; 1662; 0650; 
	0036; 0007; 0416; 1662; 0450; 1222; 0576; 1076; 0020; 
	1476; 1776; 1126; 0422; 0113; 0650; 1231; 0616; 1024; 
	0413; 1356; 1506; 0003; 1316; 0576; 0003; 0776; 0456; 
	1131; 1542; 0107; 1462; 1636; 0007; 0714; 0665; 1014; 
	1165; 1114; 1161; 1771; 1214; 1161; 0765; 1314; 1161; 
	1575; 1161; 1345; 1161; 1731; 1656; 0516; 0032; 0277; 
	0516; 1456; 0034; 0416; 0154; 0303; 1656; 0676; 0343; 
	0346; 0752; 1314; 1425; 1124; 0033; 0524; 1123; 1731; 
	1235; 1123; 1731; 1661; 1345; 1314; 1155; 1575; 1214; 
	1155; 0765; 1114; 1155; 1771; 1014; 1155; 1155; 1155; 
	0614; 1362; 1514; 1056; 1656; 0630; 1073; 0224; 0573; 
	1752; 1172; 1413; 1426; 0547; 1626; 0416; 0552; 0563; 
	1316; 0322; 1652; 0676; 0663; 1456; 1416; 0356; 1316; 
	1056; 0316; 0546; 0224; 0733; 0430; 0746; 0747; 0630; 
	0154; 0727; 1116; 1116; 0224; 1123; 0060; 0714; 0330; 
	0330; 0030; 1030; 0530; 0030; 1130; 1653; 1131; 1742; 
	0456; 0576; 1033; 1322; 1656; 0426; 1656; 1576; 1043; 
	1456; 1742; 1461; 0220; 1322; 1576; 1127; 1376; 1616; 
	0060; 0220; 1316; 1056; 1203; 1616; 0576; 1177; 1656; 
	0426; 1656; 0667; 0314; 0712; 0536; 1257; 0276; 1446; 
	1356; 1454; 1427; 0146; 1333; 0124; 0003; 0222; 1546; 
	0772; 1062; 1646; 0220; 1044; 0630; 1130; 0330; 0130; 
	0430; 0730; 0130; 1633; 1746; 0623; 1616; 0542; 1423; 
	1316; 0074; 1554; 1427; 0752; 1376; 1414; 0056; 1142; 
	1533; 0416; 0552; 1156; 1477; 0316; 0452; 1616; 1176; 
	1437; 1646; 0616; 0056; 1414; 0753; 1114; 0330; 0130; 
	0030; 0130; 0730; 1130; 1030; 0030; 0530; 0530; 0330; 
	1567; 1656; 0456; 0606; 1272; 0573; 0772; 1316; 0752; 
	1713; 0637; 0316; 1414; 0230; 0330; 0030; 0230; 0530; 
	1007; 0514; 0773;
	
$
